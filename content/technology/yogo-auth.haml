---
layout:   technology
filter: haml

menu_tech: lit
---
%h2 Yogo Authorization

%img.left{:src => "/images/yogo/YDMF-auth.png"}

%p
  The authorization system is a middleware compoenent that fits into the RACK stack. It wraps the subject objects produced by the Yogo DB component with a proxy object. The proxy object looks and acts just like the original object, except that it also verifies that the current user of the system is allowed to access the action on the object. This is known as the Facet pattern. If the current user is not allowed to access the action, an error is raised that can be handled at a different layer of the application.

%p
  When an authorization error is raised, the module the error was raised in decides what action should be taken next. With the default setup, users not authenticated to the system, are prompted to login to the system and the action is attempted again. If the current user has already logged in, a friendly error is presented to the user, and the action is not allowed to complete.

%p
  Additionally, programmatic access to the data is managed by the Yogo Auth component. In order to allow authenticated users to interact with Yogo programmatically, the Framework supports security through application programmatic interface (API) keys, which users provide when they make calls. These keys are unique and associated with users so the Yogo-based application retrieves the user associated with the API key and continues to process the request just like it originated from the user interface.  Use of the Yogo Auth component is optional, it can be used or omitted from a Yogo-based application.
  
%img{:src => "/images/yogo/voeis-roles.png"}

%p
  This example of a System Roles dashboard is from the 
  %a{:href => "http://voeis.msu.montana.edu"}Virtual Observatory and Ecological Informatics System (VOEIS) 
  application that requires a robust set of authorization levels for adding and editing data.
